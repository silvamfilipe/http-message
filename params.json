{"name":"Http-message","tagline":"PSR Http Message compliant package","body":"# HTTP Message\r\n\r\n[![Latest Version](https://img.shields.io/github/release/silvamfilipe/http-message.svg?style=flat-square)](https://github.com/silvamfilipe/http-message/releases)\r\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\r\n[![Build Status](https://img.shields.io/travis/silvamfilipe/http-message/master.svg?style=flat-square)](https://travis-ci.org/silvamfilipe/http-message)\r\n[![Coverage Status](https://img.shields.io/scrutinizer/coverage/g/silvamfilipe/http-message.svg?style=flat-square)](https://scrutinizer-ci.com/g/silvamfilipe/http-message/code-structure)\r\n[![Quality Score](https://img.shields.io/scrutinizer/g/silvamfilipe/http-message.svg?style=flat-square)](https://scrutinizer-ci.com/g/silvamfilipe/http-message)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/silvamfilipe/http-message.svg?style=flat-square)](https://packagist.org/packages/silvamfilipe/http-message)\r\n\r\nPSR Http Message compliant package. The goal is to have an HTTP message abstraction\r\nthat can be used to implement a request/response strategy application.\r\n\r\nThis package is compliant with PSR-2 code standards and PSR-4 autoload standards. It\r\nalso applies the [semantic version 2.0.0](http://semver.org) specification.\r\n\r\n## Installing via Composer\r\n\r\nThe recommended way to install `Fsilva\\HttpMessage` package is through\r\n[Composer][].\r\n\r\n```bash\r\n# Install Composer\r\ncurl -sS https://getcomposer.org/installer | php\r\n```\r\n\r\nYou can add `Fsilva\\HttpMessage` package as a dependency using the composer.phar CLI:\r\n\r\n``` bash\r\n$ composer require fsilva/http-message\r\n```\r\n\r\nAlternatively, you can `Fsilva\\HttpMessage` package as a dependency in your\r\nprojectâ€™s existing composer.json file:\r\n\r\n```javascript\r\n{\r\n    \"require\": {\r\n        \"fsilva/http-message\": \"*\"\r\n    }\r\n}  \r\n```\r\n\r\n## Basic usage\r\n\r\n### Creating a very basic HTTP message\r\n``` php\r\nuse Fsilva/HttpMessage/Message;\r\nuse Fsilva/HttpMessage/Stream/Buffer;\r\n\r\n$message = new Message();\r\n$body = new Buffer();\r\n$body->write(json_encode(['some' => 'value']));\r\n\r\n$request = $message->withProtocolVersion(Message::HTTP_1_1)\r\n    ->withHeader('X-Requested-With', 'XMLHttpRequest')\r\n    ->withHeader('User-Agent', 'PHP Request call')\r\n    ->withBody($body)\r\n    ->withoutHeader('pragma')\r\n    ->withAddedHeader('X-Forwarded-For', ['client1', 'proxy1', 'proxy2']);\r\n    \r\n$strMessage = \"GET / HTTP/\". $request->getProtocolVersion();\r\n\r\nforeach($request->getHeaders() as $name => $values) {\r\n    $strMessage .= \"\\n{$name}: \". implode(', ', $values);\r\n}\r\n\r\n// $strMessage is now a very simple HTTP message.\r\n$strMessage .= \"\\n\\n\". $request->getBody()->getContents();\r\n\r\n```\r\n\r\n## Testing\r\n\r\n``` bash\r\n$ vendor/bin/phpunit\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](https://github.com/silvamfilipe/http-message/blob/master/CONTRIBUTING.md) for details.\r\n\r\n## Credits\r\n\r\n- [Filipe Silva](https://github.com/silvamfilipe)\r\n- [All Contributors](https://github.com/silvamfilipe/http-message/contributors)\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\r\n\r\n[Composer]: https://getcomposer.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}